import datetime
from operator import itemgetter, attrgetter

class Joueur:
    def __init__(self, prenom, nom, date, sexe, classement):
        self.nom = str(nom)
        self.prenom = str(prenom)
        self.date = date
        self.sexe = sexe
        self.classement = int(classement)

    def __lt__(self, other):
        return self.classement < other.classement

    def players(players):
        return players


def create_players():
    joueurs = []
    for i in range(0,8):
        print("Joueur "+str(i+1))
        prenom = input("Entrez le prenom :")
        nom = input("Entrez le nom :")
        date = input("Entrez la date de naissance :")
        sexe = input("Entrez le sexe :")
        classement = input("Entrez le classement :")
        joueurs.append(Joueur(prenom,nom,date,sexe,classement))
    return joueurs


class Tournoi:

    date_fin = str()
    date_debut = str()

    def __init__(self, nom, lieu, joueurs, tournee, temps, description):
        self.nom = nom
        self.lieu = lieu
        self.joueurs = joueurs
        self.nb_tour = 4
        self.tournee = tournee
        self.temps = temps
        self.description = str(description)


class Tour:
    def __init__(self, liste_matchs, nom):
        self.liste_matchs = liste_matchs
        self.nom = nom
        self.date_debut = str(datetime.datetime.now())
        self.date_fin = 0


def add_tour(tours,liste_matchs):
    nom = input("Entrez le nom du tour : ")
    tours.append(Tour(liste_matchs,nom))
    print(tours)


class Match:
    def __init__(self, joueur1,joueur2, score_p1,score_p2):
        self.joueur1 = joueur1
        self.joueur2 = joueur2
        self.score_p1 = score_p1
        self.score_p2 = score_p2


def first_round(joueurs):
    players_sup = []
    players_inf = []

    for i in range(0, 4):
        players_sup.append(joueurs[i])
    for i in range(4, 8):
        players_inf.append(joueurs[i])

    noms_matchs = []
    matchs = []
    for i in range(0, 4):
        noms_matchs.append(players_sup[i].prenom + " Versus " + players_inf[i].prenom)
    print(noms_matchs)

    for i in range(0, 4):
        print("Match " + str(i+1) + " " + str(noms_matchs[i]))
        score_p1 = input("Score J1: ")
        score_p2 = input("Score J2: ")
        matchs.append(Match(players_sup[i], players_inf[i], score_p1, score_p2))
    return matchs


def get_ranking(previous_matchs):
    ranking = []
    winners = []
    tied = []
    losers = []
    for i in range(0,4):
        if previous_matchs[i].score_p1 > previous_matchs[i].score_p2:
            winners.append(previous_matchs[i].joueur1)
            losers.append(previous_matchs[i].joueur2)
        elif previous_matchs[i].score_p2 > previous_matchs[i].score_p1:
            winners.append(previous_matchs[i].joueur2)
            losers.append(previous_matchs[i].joueur1)
        else:
            tied.append(previous_matchs[i].joueur1)
            tied.append(previous_matchs[i].joueur2)

    winners.sort()
    losers.sort()
    tied.sort()

    for winner in winners:
        ranking.append(winner)
    for player in tied:
        ranking.append(player)
    for loser in losers:
        ranking.append(loser)
    return ranking


def next_round(ranking):
    noms_matchs = []
    matchs = []
    noms_matchs.append(ranking[0].prenom + " Versus " + ranking[1].prenom)
    noms_matchs.append(ranking[2].prenom + " Versus " + ranking[3].prenom)
    noms_matchs.append(ranking[4].prenom + " Versus " + ranking[5].prenom)
    noms_matchs.append(ranking[6].prenom + " Versus " + ranking[7].prenom)
    print("Matchs du tour : ")
    print(noms_matchs)
    for i in range(0, 4):
        print("Match " + str(i+1) + " " + str(noms_matchs[i]))
        score_p1 = input("Score J1: ")
        score_p2 = input("Score J2: ")
        matchs.append(Match(ranking[0],ranking[1],score_p1,score_p2))
        matchs.append(Match(ranking[2],ranking[3],score_p1,score_p2))
        matchs.append(Match(ranking[4],ranking[5],score_p1,score_p2))
        matchs.append(Match(ranking[6],ranking[7],score_p1,score_p2))
    return matchs


def set_ranking(joueurs):
    ranking = {}
    print("Mettre à jour le classement général")
    for joueur in joueurs:
        print("Joueur "+joueur.prenom)
        score = input("Score : ")
        ranking[joueur] = int(score)
    sorted(ranking.items(), key=lambda t: t[1])
    print("Classement à jour :")
    i = 1
    for rank in ranking:
        print("Classé "+str(i)+" : "+ rank.prenom+ " : " + str(ranking[rank])+"pts")
        i += 1
    return ranking


def edit_ranking(ranking):
    choice = input("Changer le classement général ? (O/N)")
    if choice == "o":
        for rank in ranking:
            print("Joueur "+rank.prenom)
            score = input("Entrez le score : ")
            ranking[rank] |= int(score)
        sorted(ranking.items(), key=lambda t: t[1])
        print("Nouveau classement :")
        i = 1
        for rank in ranking:
            print("Classé "+str(i)+" : "+rank.prenom+" : "+ranking[rank.prenom]+"pts")
            i += 1
    else:
        pass
    return ranking

def main():

    nom_tournoi = input("Entrez le nom du tournoi : ")
    description = input("Description : ")
    temps = input("Temps : ")
    lieu = input("Lieu : ")
    date_debut = str(datetime.datetime.now())
    joueurs = create_players()
    matchs1 = first_round(joueurs)
    final_ranking = set_ranking(joueurs)
    tournees = []
    add_tour(tournees,matchs1)
    ranking = get_ranking(matchs1)
    matchs2 = next_round(ranking)
    final_ranking = edit_ranking(final_ranking)
    add_tour(tournees,matchs2)
    ranking = get_ranking(matchs2)
    matchs3 = next_round(ranking)
    final_ranking = edit_ranking(final_ranking)
    add_tour(tournees,matchs3)
    ranking = get_ranking(matchs3)
    matchs4 = next_round(ranking)
    final_ranking = edit_ranking(final_ranking)
    add_tour(tournees,matchs4)
    date_fin = str(datetime.datetime.now())

    tournoi = Tournoi(nom_tournoi,lieu,joueurs,tournees,temps,description)
    tournoi.date_debut = date_debut
    tournoi.date_fin = date_fin
    edit_ranking(final_ranking)

main()

